1
00:00:00,500 --> 00:00:01,100
Hey, guys.

2
00:00:01,100 --> 00:00:07,970
So in the last lesson, we saw how Flexbox can be declared on a container and how it can start already

3
00:00:07,970 --> 00:00:12,400
doing its thing based on the automatic default values.

4
00:00:12,410 --> 00:00:17,600
But in this lesson, I want to talk to you about something called flex direction so that we can actually

5
00:00:17,600 --> 00:00:23,030
learn how to modify our Flexbox in order to achieve the layouts that we want.

6
00:00:23,210 --> 00:00:31,760
When we think about a default flow, normally items get laid out like this, so if they're inline,

7
00:00:31,760 --> 00:00:35,960
they'll continue stacking inline until there is no more space.

8
00:00:35,960 --> 00:00:43,100
If they are block, they will stack one on top of each other and they will continue like this.

9
00:00:43,100 --> 00:00:46,430
And this is the sort of default HTML flow.

10
00:00:46,430 --> 00:00:53,540
It goes from top to bottom, as you saw previously with our Flexbox.

11
00:00:53,540 --> 00:01:00,290
As soon as we put everything inside a flexible container, all of the items that are contained gets

12
00:01:00,390 --> 00:01:03,180
put onto this row.

13
00:01:03,300 --> 00:01:10,920
It gets lined up all along like this, and they go one after the other from left to right.

14
00:01:11,040 --> 00:01:18,540
And the reason for this is because there is a property in Flexbox called the flex direction.

15
00:01:18,840 --> 00:01:24,630
And by default, this flex direction is set to row.

16
00:01:24,630 --> 00:01:29,100
So it means that things will be laid out along a row.

17
00:01:29,100 --> 00:01:33,930
And it's a little bit confusing because you might think, well, actually I'm creating columns here.

18
00:01:33,930 --> 00:01:34,440
Right?

19
00:01:34,440 --> 00:01:40,290
But I want you to think about it in terms of how the next item is going to be stacked onto the page

20
00:01:40,290 --> 00:01:48,810
and it's going to be stacked on one after the other onto the same row until there is no more space and

21
00:01:48,810 --> 00:01:54,690
it's still going to try and continue to stack it from left to right in Flexbox.

22
00:01:54,690 --> 00:02:02,460
That means when you have a flex direction set to row, then you're setting something called the main

23
00:02:02,460 --> 00:02:03,420
axis.

24
00:02:03,450 --> 00:02:07,290
In this case, this is the main axis.

25
00:02:07,380 --> 00:02:11,790
It's going from left to right and it's on the horizontal.

26
00:02:11,940 --> 00:02:17,160
When flex direction is row main axis is horizontal from left to right.

27
00:02:17,160 --> 00:02:21,150
And then there's something called the cross axis.

28
00:02:21,420 --> 00:02:27,000
The cross axis goes perpendicular to the main axis.

29
00:02:27,000 --> 00:02:33,120
That means in the case where flex direction is row, the cross axis goes from top to bottom.

30
00:02:33,300 --> 00:02:34,410
Bear with me here.

31
00:02:34,410 --> 00:02:36,480
I'm going to show you the other option.

32
00:02:36,480 --> 00:02:39,930
If we didn't set the flex direction, it would default to row.

33
00:02:39,930 --> 00:02:48,870
But if we had set the flex direction to column, then what it's going to do is it's going to make all

34
00:02:48,870 --> 00:02:55,320
of the items inside this flexible container go from top to bottom.

35
00:02:55,320 --> 00:03:04,260
So now what we've done is we've changed the main axis, the main axis is now from top to bottom.

36
00:03:04,260 --> 00:03:10,650
And that means that the cross axis is the one that's now from left to right.

37
00:03:10,680 --> 00:03:14,340
Now, why does all of these main axis and cross axis even matter?

38
00:03:14,340 --> 00:03:20,250
Well, it matters when we want to continue to customize our Flexbox items.

39
00:03:20,580 --> 00:03:21,930
Let's take an example.

40
00:03:21,930 --> 00:03:25,230
Property, for example, the flex basis.

41
00:03:25,260 --> 00:03:29,100
Now, you can imagine this property almost like setting the height.

42
00:03:29,100 --> 00:03:37,260
In this case, if we go ahead and increase this height to 100 pixels, then what's going to happen is

43
00:03:37,260 --> 00:03:47,610
it will expand along the main axis to satisfy that requirement of the flex basis, 100 pixel.

44
00:03:47,880 --> 00:03:51,510
Now, this is the thing about the flex basis.

45
00:03:51,510 --> 00:03:58,440
If instead of having the main axis along this way, if the main axis was this way.

46
00:03:58,440 --> 00:04:07,890
So in the case of flex direction set to row, then remember the main axis is now this way.

47
00:04:07,890 --> 00:04:16,470
And so now when we set the flex basis to a larger flex basis, instead of setting the height as we did

48
00:04:16,470 --> 00:04:19,440
previously, it's now actually setting the width.

49
00:04:19,440 --> 00:04:27,240
When this happens, we're again going to use flex basis 100 and when the code runs, it changes the

50
00:04:27,240 --> 00:04:32,760
width of each of the items inside the container to satisfy that requirement.

51
00:04:33,120 --> 00:04:40,170
As you can see, along with flex basis and a number of other properties, essentially they are flexing

52
00:04:40,170 --> 00:04:48,600
along the main axis when it's a row, the flex basis is the width and when it's a column, the flex

53
00:04:48,600 --> 00:04:50,160
basis is a height.

54
00:04:50,160 --> 00:04:54,720
Essentially, we are flexing along the main axis.

55
00:04:55,230 --> 00:04:59,970
That's why the main axis and the cross axis matters when it comes.

56
00:05:00,020 --> 00:05:01,640
To flex direction.

57
00:05:02,780 --> 00:05:09,920
Let's go ahead and try an exercise to see if you can apply a different flex direction to the code that

58
00:05:09,920 --> 00:05:11,030
we've set up for you.

59
00:05:11,300 --> 00:05:18,320
So go ahead and extract the flex direction folder and open up index.html and then go ahead and show

60
00:05:18,320 --> 00:05:20,150
it inside preview.

61
00:05:20,180 --> 00:05:26,780
Now you'll see I've created all the colors of a rainbow inside a container.

62
00:05:26,990 --> 00:05:30,320
Now, in this case, we've already set it to display flex.

63
00:05:30,320 --> 00:05:34,400
And remember, by default, the flex direction will be a row.

64
00:05:34,550 --> 00:05:40,400
So it's flexing along this direction, left or right, as the main axis.

65
00:05:40,640 --> 00:05:47,900
Now, the goal or what it is that you're trying to solve is to change the layout so that not only are

66
00:05:47,900 --> 00:05:55,220
they taller, but also they are aligned along this top to bottom axis.

67
00:05:56,030 --> 00:06:04,280
And I can tell you that this height of each item is 100 pixels high.

68
00:06:04,310 --> 00:06:07,070
You're going to have to learn to use the flex direction.

69
00:06:07,070 --> 00:06:12,290
Also, what we learned about the flex basis in order to get this outcome.

70
00:06:13,010 --> 00:06:22,790
Now, there is one thing that you might need to be able to achieve this, because remember, the flex

71
00:06:22,790 --> 00:06:29,120
basis is set on the child element.

72
00:06:29,120 --> 00:06:38,240
So each of these elements and not on the container like with Display flex or with Gap, they're all

73
00:06:38,240 --> 00:06:41,360
going on to the container or the parent.

74
00:06:41,360 --> 00:06:45,790
But the flex basis has to actually go on to the child.

75
00:06:45,800 --> 00:06:53,180
So I want you to take a look at the developer docs that I've linked to to see which selector you need

76
00:06:53,180 --> 00:07:01,230
to use and how to combine the selectors in order to target all of these divs Now because all of these

77
00:07:01,230 --> 00:07:03,840
divs don't really share anything in common.

78
00:07:03,870 --> 00:07:10,050
For example, they don't have the same class or they're not a different type of element.

79
00:07:10,050 --> 00:07:13,140
I don't want you to change any of the HTML.

80
00:07:13,170 --> 00:07:17,400
I want you to use CSS to target just these divs.

81
00:07:17,400 --> 00:07:21,660
And we've learned about some of this before when we learned about combining selectors.

82
00:07:21,660 --> 00:07:25,870
So if you want to do a quick recap of that lesson, this might be a good moment.

83
00:07:25,890 --> 00:07:30,780
Alternatively, you can do what every developer does when they forget how to do something, which is

84
00:07:30,780 --> 00:07:33,420
take a look at the documentation.

85
00:07:33,570 --> 00:07:39,420
This is a sort of a two part challenge, but essentially the end outcome is to achieve something that

86
00:07:39,420 --> 00:07:43,380
looks like this without changing any of the HTML.

87
00:07:43,410 --> 00:07:47,370
Pause the video, have a read through the docs, see if you can figure this out.

88
00:07:50,520 --> 00:07:50,820
All right.

89
00:07:50,820 --> 00:07:53,400
So let's go ahead and try to solve this.

90
00:07:53,430 --> 00:08:01,170
The first thing we know we need to do in order to turn it from this left to right and instead go from

91
00:08:01,170 --> 00:08:04,470
top to bottom is we need to change the flex direction.

92
00:08:04,470 --> 00:08:10,350
So as I mentioned, the flex direction is a property that goes onto the parent and we can change it

93
00:08:10,350 --> 00:08:16,650
to column so that instead of lining up like this, it lines up from top to bottom.

94
00:08:16,740 --> 00:08:23,640
Now, unfortunately, you can see by default, everything is occupying 100% of the width.

95
00:08:23,640 --> 00:08:25,850
And we don't really want that.

96
00:08:25,860 --> 00:08:30,660
We want it to only occupy as much width as we have content for.

97
00:08:30,780 --> 00:08:35,490
This is a little bit of a challenge, but this is something that we mentioned in the last lesson.

98
00:08:35,490 --> 00:08:42,450
Instead of having display as flex where the entire container is going to occupy the full width, we

99
00:08:42,450 --> 00:08:50,500
can change it to inline flex, which is going to make it occupy only as much width as it needs to fit

100
00:08:50,500 --> 00:08:53,920
the widest bit of content contained in the container.

101
00:08:54,520 --> 00:08:59,020
That was a little bit of a revision for you there, trying to catch you out to see if you remember what

102
00:08:59,020 --> 00:09:00,520
we learned in the last lesson.

103
00:09:01,120 --> 00:09:06,760
The next thing we have to do in order to achieve this goal is to try and make it a little bit taller.

104
00:09:06,760 --> 00:09:13,090
And I mentioned that we can do that by using the flex basis property.

105
00:09:13,090 --> 00:09:17,620
But I also mentioned that you can't set the flex basis on the container.

106
00:09:17,650 --> 00:09:25,150
See what happens if I try to do this flex basis on the parent container, let's set it to 100 pixels

107
00:09:25,150 --> 00:09:27,730
and then once it reloads, pretty much nothing happens.

108
00:09:27,730 --> 00:09:32,170
This is not a property that's intended for the parent.

109
00:09:32,170 --> 00:09:40,390
And remember, when it comes to Flexbox, the container that contains the elements, this is the parent.

110
00:09:40,540 --> 00:09:48,310
And each of these items in here, these are the children, or normally we just call them items.

111
00:09:49,210 --> 00:09:54,490
How do we target all of the items inside this div?

112
00:09:54,670 --> 00:09:59,120
We've got a div called Container and we want to get all of its children.

113
00:09:59,140 --> 00:10:06,940
Well, if we take a look at this hint, then you can see that we once upon a time learned about combinators

114
00:10:06,940 --> 00:10:09,760
different ways of combining CSS selectors.

115
00:10:09,790 --> 00:10:12,010
There's the Descendant Combinator.

116
00:10:12,040 --> 00:10:18,730
There's also something called the Child Combinator that is done using this lesser than sign between

117
00:10:18,730 --> 00:10:27,040
two selectors, and it matches only the elements where the second selector are the direct children.

118
00:10:27,040 --> 00:10:28,720
That's matched by the first.

119
00:10:28,750 --> 00:10:34,450
This basically says if we have a selector that selects the parent and then we have a selector for the

120
00:10:34,450 --> 00:10:38,380
child, then we're only going to select the direct children.

121
00:10:38,710 --> 00:10:42,850
And in this case, that's pretty much exactly what we want to do.

122
00:10:42,970 --> 00:10:49,900
Now, I also linked to this other doc, which is about the universal selector.

123
00:10:49,900 --> 00:10:54,640
So remember using the asterisks, we can select all the elements.

124
00:10:54,760 --> 00:11:07,960
If in this case, what we're trying to select is to select all the elements that are the direct children

125
00:11:07,960 --> 00:11:12,790
of the dot container class.

126
00:11:13,210 --> 00:11:16,990
The dot container class is our Flexbox container.

127
00:11:16,990 --> 00:11:23,380
And in order to get hold of all the children using what we just read from the docs, we can select that

128
00:11:23,380 --> 00:11:28,450
container using that right angle bracket as the combinator.

129
00:11:28,480 --> 00:11:34,960
And then the children selector we're going to use is simply an asterisks and this is going to select

130
00:11:34,960 --> 00:11:37,120
all of the direct children.

131
00:11:37,120 --> 00:11:41,320
So not the grandchildren or, you know, two levels down, three levels down.

132
00:11:41,560 --> 00:11:47,470
So if we had a div inside this div because this is not a direct child, this is actually a grandchild,

133
00:11:47,470 --> 00:11:52,230
then it's not going to be selected by this combination.

134
00:11:52,230 --> 00:11:59,550
All the direct children of the container class is all of our flexible items.

135
00:11:59,550 --> 00:12:07,290
And then we're going to change the flex basis to 100 pixels.

136
00:12:07,290 --> 00:12:17,280
And because our main axis is from top to bottom, because we've set the flex direction to column, then

137
00:12:17,280 --> 00:12:25,470
our flex basis, 100 pixels will get applied to each of these child items and we're able to achieve

138
00:12:25,470 --> 00:12:28,260
the final goal outcome.

139
00:12:28,710 --> 00:12:34,530
So there were quite a few bits in this challenge, but hopefully you got there in the end, maybe with

140
00:12:34,530 --> 00:12:39,390
a few hints from me, but I want you to play around with this flex direction.

141
00:12:39,420 --> 00:12:41,640
See what happens when you change it.

142
00:12:41,670 --> 00:12:47,010
See what happens when you change, say the flex basis and you change the flex direction.

143
00:12:47,010 --> 00:12:49,980
See what happens when you change the display.

144
00:12:50,190 --> 00:12:54,090
Inline flex to something else.

145
00:12:54,420 --> 00:13:02,070
See what happens when you have a flex basis on but there's not enough widths and all of these things

146
00:13:02,220 --> 00:13:02,880
for now.

147
00:13:02,910 --> 00:13:09,360
Don't worry too much about how sizing is handled in Flexbox because it is one of the weirdest parts

148
00:13:09,360 --> 00:13:10,170
of Flexbox.

149
00:13:10,170 --> 00:13:14,250
And there's going to be a lesson that I'm going to dedicate to Flexbox sizing.

150
00:13:14,400 --> 00:13:25,020
But for now, you can see how lovely our Flexbox flexes along the different axes and how useful this

151
00:13:25,020 --> 00:13:27,600
is for creating different layouts.

152
00:13:28,110 --> 00:13:33,840
And once you're done playing around with flex direction, head over to the next lesson and we're going

153
00:13:33,840 --> 00:13:40,800
to learn more about the different properties that we can apply to the parent Flexbox container.

154
00:13:41,070 --> 00:13:42,360
For all of that and more.

155
00:13:42,390 --> 00:13:43,200
I'll see you there.

